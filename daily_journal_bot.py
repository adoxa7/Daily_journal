# daily_journal_bot.py

import os
import sqlite3
import datetime
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, CallbackContext
)
from apscheduler.schedulers.background import BackgroundScheduler

BOT_TOKEN = os.getenv("BOT_TOKEN") or "PASTE_YOUR_BOT_TOKEN_HERE"
DB_PATH = "journal_data.db"

# === DATABASE ===
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS entries (
            user_id INTEGER,
            date TEXT,
            category TEXT,
            question TEXT,
            response TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )''')
        conn.commit()

# === SAVE ENTRY ===
def save_response(user_id, category, question, response):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''INSERT INTO entries (user_id, date, category, question, response)
                     VALUES (?, ?, ?, ?, ?)''',
                  (user_id, datetime.date.today().isoformat(), category, question, response))
        conn.commit()

# === GLOBAL TRACKING OF ACTIVE PROMPTS ===
active_prompts = {}

# === GENERIC SENDER ===
async def send_prompt(context: CallbackContext, user_id: int, category: str, prompts: list):
    active_prompts[user_id] = {"category": category, "questions": prompts.copy(), "timestamp": datetime.datetime.now()}
    for prompt in prompts:
        if isinstance(prompt[1], list):  # multiple choice
            keyboard = [[KeyboardButton(opt) for opt in row] for row in prompt[1]]
            markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await context.bot.send_message(chat_id=user_id, text=prompt[0], reply_markup=markup)
        else:
            await context.bot.send_message(chat_id=user_id, text=prompt[0])

# === INDIVIDUAL PROMPTS ===
def get_sleep_prompts():
    return [
        ("–í–æ —Å–∫–æ–ª—å–∫–æ –ª–µ–≥ —Å–ø–∞—Ç—å?", None),
        ("–í–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è?", None),
        ("–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞? (1-5)", [["5", "4", "3", "2", "1"]]),
        ("–ü—Ä–æ—Å—ã–ø–∞–ª—Å—è –ª–∏ –Ω–æ—á—å—é?", [["–î–∞", "–ù–µ—Ç"]]),
        ("–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –≤—ã—Å–ø–∞–≤—à–∏–º—Å—è?", [["–î–∞", "–ù–µ—Ç"]]),
        ("–ë—ã–ª–æ –ª–∏ –ø–µ—Ä–µ—Å—ã–ø–∞–Ω–∏–µ?", [["–î–∞", "–ù–µ—Ç"]]),
        ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", None)
    ]

def get_energy_control_prompt():
    return [
        ("–°–æ–±–ª—é–¥–∞–ª –ª–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å?", [["–î–∞", "–ù–µ—Ç"]]),
        ("–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å—Ç–æ—â–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏?", None)
    ]

def get_dopamine_prompts():
    return [
        ("–ö–∞–∫–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è?", [["YouTube", "Instagram", "Dating Apps"]]),
        ("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–æ—Ç—Ä–µ–ª reels/shorts?", [["<30 –º–∏–Ω", "30-60 –º–∏–Ω", ">1 —á–∞—Å"]]),
        ("–û–±—â–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞?", [["<2 —á", "2-4 —á", ">4 —á"]]),
        ("–ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª –∏–º–ø—É–ª—å—Å—ã? (1-5)", [["5", "4", "3", "2", "1"]])
    ]

def get_nutrition_prompts():
    return [
        ("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è?", [["0", "1", "2", "3", "4", "5"]]),
        ("–ë—ã–ª –ª–∏ –ø–µ—Ä–µ–∫—É—Å –ø–æ—Å–ª–µ 20:00?", [["–î–∞", "–ù–µ—Ç"]]),
        ("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª? (–≤ —Å—Ç–∞–∫–∞–Ω–∞—Ö)", [["1-3", "4-6", "7+"]]),
        ("–ö–∞–∫–∏–µ –ë–ê–î—ã –ø—Ä–∏–Ω—è–ª? (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)", [["Cod liver oil", "Magnesium glycinate", "L-theanine"]]),
        ("–î—Ä—É–≥–∏–µ –ë–ê–î—ã (–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", None)
    ]

def get_skincare_prompt():
    return [("–ö–∞–∫–æ–π —É—Ö–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω?", [["–ù–∏–∞—Ü–∏–Ω–∞–º–∏–¥", "–†–µ—Ç–∏–Ω–æ–ª", "–ü–∏–ª–∏–Ω–≥", "–ù–∏—á–µ–≥–æ"]])]

def get_sun_prompt():
    return [("–ü—Ä–∏–Ω–∏–º–∞–ª –ª–∏ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏?", [["–î–∞", "–ù–µ—Ç"]]), ("–ö–∞–∫ –¥–æ–ª–≥–æ?", [["<15 –º–∏–Ω", "15-30 –º–∏–Ω", ">30 –º–∏–Ω"]])]

def get_work_prompt():
    return [("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–≤—è—Ç–∏–ª —Ä–∞–±–æ—Ç–µ/–æ–±—É—á–µ–Ω–∏—é?", [["<1 —á", "1-2 —á", "2-4 —á", ">4 —á"]])]

# === HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text
    if user_id in active_prompts:
        prompt_info = active_prompts[user_id]
        if prompt_info["questions"]:
            question = prompt_info["questions"].pop(0)[0]
            save_response(user_id, prompt_info["category"], question, msg)
        if not prompt_info["questions"]:
            del active_prompts[user_id]
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ")

# === SCHEDULING ===
def schedule_jobs(app: Application):
    scheduler = BackgroundScheduler(timezone="Asia/Almaty")

    def wrap_send(user_id, prompts, category):
        async def job():
            await send_prompt(app.bot, user_id, category, prompts)
        return job

    user_ids = [123456789]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    for uid in user_ids:
        scheduler.add_job(wrap_send(uid, get_sleep_prompts(), "–°–æ–Ω"), 'cron', hour=10, minute=30)
        scheduler.add_job(wrap_send(uid, get_energy_control_prompt(), "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"), 'cron', hour=10, minute=35)
        scheduler.add_job(wrap_send(uid, get_sun_prompt(), "–°–æ–ª–Ω—Ü–µ"), 'cron', hour=20)
        scheduler.add_job(wrap_send(uid, get_work_prompt(), "–†–∞–±–æ—Ç–∞/–û–±—É—á–µ–Ω–∏–µ"), 'cron', hour=23)
        scheduler.add_job(wrap_send(uid, get_dopamine_prompts(), "–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å"), 'cron', hour=23)
        scheduler.add_job(wrap_send(uid, get_nutrition_prompts(), "–ü–∏—Ç–∞–Ω–∏–µ"), 'cron', hour=23, minute=55)
        scheduler.add_job(wrap_send(uid, get_skincare_prompt(), "–£—Ö–æ–¥"), 'cron', hour=0, minute=5)

        scheduler.add_job(lambda: app.bot.send_message(uid, "üåô –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É: –≤—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç, —É–±–µ—Ä–∏ –≥–∞–¥–∂–µ—Ç—ã, –ø–æ–∑–≤–æ–ª—å –º–æ–∑–≥—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å. –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–π —Ç—ã —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ!"), 'cron', hour=1)
        scheduler.add_job(lambda: app.bot.send_message(uid, "‚òÄÔ∏è –ü–æ—Ä–∞ –≤—ã–π—Ç–∏ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç!"), 'cron', hour=12)
        scheduler.add_job(lambda: app.bot.send_message(uid, "üéØ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 4-—á–∞—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ. –ë—É–¥—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–µ–Ω!"), 'cron', hour=13)

    scheduler.start()

# === MAIN ===
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    schedule_jobs(app)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()

