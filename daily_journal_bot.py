# daily_journal_bot.py

import os
import sqlite3
import datetime
import asyncio
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackContext
)
from apscheduler.schedulers.background import BackgroundScheduler

BOT_TOKEN = os.getenv("BOT_TOKEN") or "PASTE_YOUR_BOT_TOKEN_HERE"
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or "https://your-app-name.onrender.com/webhook"
DB_PATH = "journal_data.db"

flask_app = Flask(__name__)

# === DATABASE ===
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS entries (
            user_id INTEGER,
            date TEXT,
            category TEXT,
            question TEXT,
            response TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )''')
        conn.commit()

# === SAVE ENTRY ===
def save_response(user_id, category, question, response):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''INSERT INTO entries (user_id, date, category, question, response)
                     VALUES (?, ?, ?, ?, ?)''',
                  (user_id, datetime.date.today().isoformat(), category, question, response))
        conn.commit()

# === GLOBAL STATE ===
active_prompts = {}
app = Application.builder().token(BOT_TOKEN).build()

# === GENERIC SENDER ===
async def send_prompt(context: CallbackContext, user_id: int, category: str, prompts: list):
    active_prompts[user_id] = {"category": category, "questions": prompts.copy(), "timestamp": datetime.datetime.now()}
    for prompt in prompts:
        if isinstance(prompt[1], list):
            keyboard = [[KeyboardButton(opt) for opt in row] for row in prompt[1]]
            markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await context.bot.send_message(chat_id=user_id, text=prompt[0], reply_markup=markup)
        else:
            await context.bot.send_message(chat_id=user_id, text=prompt[0])

# === PROMPTS ===
# ... [–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_sleep_prompts() –∏ —Ç.–ø. –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

# === HANDLERS ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text
    if user_id in active_prompts:
        prompt_info = active_prompts[user_id]
        if prompt_info["questions"]:
            question = prompt_info["questions"].pop(0)[0]
            save_response(user_id, prompt_info["category"], question, msg)
        if not prompt_info["questions"]:
            del active_prompts[user_id]
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ")

# === SCHEDULING ===
def schedule_jobs():
    scheduler = BackgroundScheduler(timezone="Asia/Almaty")

    def wrap_send(user_id, prompts, category):
        async def job():
            await send_prompt(CallbackContext.from_update(None, app), user_id, category, prompts)
        return job

    user_ids = [148797692]  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ user_id

    for uid in user_ids:
        scheduler.add_job(wrap_send(uid, get_sleep_prompts(), "–°–æ–Ω"), 'cron', hour=10, minute=30)
        scheduler.add_job(wrap_send(uid, get_energy_control_prompt(), "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"), 'cron', hour=10, minute=35)
        scheduler.add_job(wrap_send(uid, get_sun_prompt(), "–°–æ–ª–Ω—Ü–µ"), 'cron', hour=20)
        scheduler.add_job(wrap_send(uid, get_work_prompt(), "–†–∞–±–æ—Ç–∞/–û–±—É—á–µ–Ω–∏–µ"), 'cron', hour=23)
        scheduler.add_job(wrap_send(uid, get_dopamine_prompts(), "–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å"), 'cron', hour=23)
        scheduler.add_job(wrap_send(uid, get_nutrition_prompts(), "–ü–∏—Ç–∞–Ω–∏–µ"), 'cron', hour=23, minute=55)
        scheduler.add_job(wrap_send(uid, get_skincare_prompt(), "–£—Ö–æ–¥"), 'cron', hour=0, minute=5)

        scheduler.add_job(lambda: app.bot.send_message(uid, "üåô –í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫–æ —Å–Ω—É!"), 'cron', hour=1)
        scheduler.add_job(lambda: app.bot.send_message(uid, "‚òÄÔ∏è –ü–æ—Ä–∞ –≤—ã–π—Ç–∏ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç!"), 'cron', hour=12)
        scheduler.add_job(lambda: app.bot.send_message(uid, "üéØ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è 4-—á–∞—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ."), 'cron', hour=13)

    scheduler.start()

# === FLASK ROUTE ===
@flask_app.post("/webhook")
async def webhook():
    data = await request.get_data()
    update = Update.de_json(data.decode("utf-8"), app.bot)
    await app.update_queue.put(update)
    return "OK"

# === MAIN ===
async def run():
    init_db()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await app.initialize()
    await app.start()
    await app.bot.set_webhook(WEBHOOK_URL)
    schedule_jobs()
    print("Webhook bot is running...")
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(run())
